{"/home/travis/build/npmtest/node-npmtest-ember-in-viewport/test.js":"/* istanbul instrument in package npmtest_ember_in_viewport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/lib.npmtest_ember_in_viewport.js":"/* istanbul instrument in package npmtest_ember_in_viewport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_in_viewport = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_in_viewport = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-in-viewport && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_in_viewport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_in_viewport\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_in_viewport.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_in_viewport.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_in_viewport.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_in_viewport.__dirname + '/lib.npmtest_ember_in_viewport.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-in-viewport'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/addon/mixins/in-viewport.js":"import Ember from 'ember';\nimport canUseDOM from 'ember-in-viewport/utils/can-use-dom';\nimport canUseRAF from 'ember-in-viewport/utils/can-use-raf';\nimport isInViewport from 'ember-in-viewport/utils/is-in-viewport';\nimport checkScrollDirection from 'ember-in-viewport/utils/check-scroll-direction';\n\nconst {\n  Mixin,\n  setProperties,\n  typeOf,\n  assert,\n  $,\n  get,\n  set,\n  run: { scheduleOnce, debounce, bind, next },\n  computed: { not },\n  getOwner\n} = Ember;\n\nconst assign = Ember.assign || Ember.merge;\n\nconst rAFIDS = {};\nconst lastDirection = {};\nconst lastPosition = {};\n\nexport default Mixin.create({\n  viewportExited: not('viewportEntered').readOnly(),\n\n  init() {\n    this._super(...arguments);\n    const options = assign({\n      viewportUseRAF: canUseRAF(),\n      viewportEntered: false,\n      viewportListeners: []\n    }, this._buildOptions());\n\n    setProperties(this, options);\n  },\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    if (!canUseDOM) {\n      return;\n    }\n\n    const viewportEnabled = get(this, 'viewportEnabled');\n    if (viewportEnabled) {\n      this._startListening();\n    }\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this._unbindListeners();\n  },\n\n  _buildOptions(defaultOptions = {}) {\n    const owner = getOwner(this);\n\n    if (owner) {\n      return assign(defaultOptions, owner.lookup('config:in-viewport'));\n    }\n  },\n\n  _startListening() {\n    this._setInitialViewport(window);\n    this._addObserverIfNotSpying();\n    this._bindScrollDirectionListener(window, get(this, 'viewportScrollSensitivity'));\n\n    if (!get(this, 'viewportUseRAF')) {\n      get(this, 'viewportListeners').forEach((listener) => {\n        const { context, event } = listener;\n        this._bindListeners(context, event);\n      });\n    }\n  },\n\n  _addObserverIfNotSpying() {\n    if (!get(this, 'viewportSpy')) {\n      this.addObserver('viewportEntered', this, this._unbindIfEntered);\n    }\n  },\n\n  _setViewportEntered(context = null) {\n    assert('You must pass a valid context to _setViewportEntered', context);\n\n    const element = get(this, 'element');\n\n    if (!element) {\n      return;\n    }\n\n    const $contextEl = $(context);\n    const boundingClientRect = element.getBoundingClientRect();\n\n    this._triggerDidAccessViewport(\n      isInViewport(\n        boundingClientRect,\n        $contextEl.innerHeight(),\n        $contextEl.innerWidth(),\n        get(this, 'viewportTolerance')\n      )\n    );\n\n    if (boundingClientRect && get(this, 'viewportUseRAF')) {\n      rAFIDS[get(this, 'elementId')] = window.requestAnimationFrame(\n        bind(this, this._setViewportEntered, context)\n      );\n    }\n  },\n\n  _triggerDidScrollDirection($contextEl = null, sensitivity = 1) {\n    assert('You must pass a valid context element to _triggerDidScrollDirection', $contextEl);\n    assert('sensitivity cannot be 0', sensitivity);\n\n    const elementId = get(this, 'elementId');\n    const lastDirectionForEl = lastDirection[elementId];\n    const lastPositionForEl = lastPosition[elementId];\n    const newPosition = {\n      top: $contextEl.scrollTop(),\n      left: $contextEl.scrollLeft()\n    };\n\n    const scrollDirection = checkScrollDirection(lastPositionForEl, newPosition, sensitivity);\n    const directionChanged = scrollDirection !== lastDirectionForEl;\n\n    if (scrollDirection && directionChanged && get(this, 'viewportEntered')) {\n      this.trigger('didScroll', scrollDirection);\n      lastDirection[elementId] = scrollDirection;\n    }\n\n    lastPosition[elementId] = newPosition;\n  },\n\n  _triggerDidAccessViewport(hasEnteredViewport = false) {\n    const viewportEntered = get(this, 'viewportEntered');\n    const didEnter = !viewportEntered && hasEnteredViewport;\n    const didLeave = viewportEntered && !hasEnteredViewport;\n    let triggeredEventName = '';\n\n    if (didEnter) {\n      triggeredEventName = 'didEnterViewport';\n    }\n\n    if (didLeave) {\n      triggeredEventName = 'didExitViewport';\n    }\n\n    if (get(this, 'viewportSpy') || !viewportEntered) {\n      set(this, 'viewportEntered', hasEnteredViewport);\n    }\n\n    this.trigger(triggeredEventName);\n  },\n\n  _unbindIfEntered() {\n    if (!get(this, 'viewportSpy') && get(this, 'viewportEntered')) {\n      this._unbindListeners();\n      this.removeObserver('viewportEntered', this, this._unbindIfEntered);\n      set(this, 'viewportEntered', true);\n    }\n  },\n\n  _setInitialViewport(context = null) {\n    assert('You must pass a valid context to _setInitialViewport', context);\n\n    return scheduleOnce('afterRender', this, () => {\n      this._setViewportEntered(context);\n    });\n  },\n\n  _debouncedEventHandler(methodName, ...args) {\n    assert('You must pass a methodName to _debouncedEventHandler', methodName);\n    assert('methodName must be a string', typeOf(methodName) === 'string');\n\n    debounce(this, () => this[methodName](...args), get(this, 'viewportRefreshRate'));\n  },\n\n  _bindScrollDirectionListener(context = null, sensitivity = 1) {\n    assert('You must pass a valid context to _bindScrollDirectionListener', context);\n    assert('sensitivity cannot be 0', sensitivity);\n\n    const $contextEl = $(context);\n\n    $contextEl.on(`scroll.directional#${get(this, 'elementId')}`, () => {\n      this._debouncedEventHandler('_triggerDidScrollDirection', $contextEl, sensitivity);\n    });\n  },\n\n  _unbindScrollDirectionListener(context = null) {\n    assert('You must pass a valid context to _bindScrollDirectionListener', context);\n\n    const elementId = get(this, 'elementId');\n\n    $(context).off(`scroll.directional#${elementId}`);\n    delete lastPosition[elementId];\n    delete lastDirection[elementId];\n  },\n\n  _bindListeners(context = null, event = null) {\n    assert('You must pass a valid context to _bindListeners', context);\n    assert('You must pass a valid event to _bindListeners', event);\n\n    $(context).on(`${event}.${get(this, 'elementId')}`, () => {\n      this._debouncedEventHandler('_setViewportEntered', context);\n    });\n  },\n\n  _unbindListeners() {\n    const elementId = get(this, 'elementId');\n\n    if (get(this, 'viewportUseRAF')) {\n      next(this, () => {\n        window.cancelAnimationFrame(rAFIDS[elementId]);\n        delete rAFIDS[elementId];\n      });\n    }\n\n    get(this, 'viewportListeners').forEach((listener) => {\n      const { context, event } = listener;\n      $(context).off(`${event}.${elementId}`);\n    });\n\n    this._unbindScrollDirectionListener(window);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/addon/utils/can-use-dom.js":"const canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport default canUseDOM;\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/addon/utils/can-use-raf.js":"// Adapted from Paul Irish's rAF polyfill\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel\n\n// MIT license\n\nimport canUseDOM from 'ember-in-viewport/utils/can-use-dom';\n\nfunction checkRAF(window, rAF, cAF) {\n  let x;\n  let vendors = [ 'ms', 'moz', 'webkit', 'o' ];\n\n  for (x = 0; x < vendors.length && !window[rAF]; ++x) {\n    window[rAF] = window[`${vendors[x]}RequestAnimationFrame`];\n    window[cAF] = window[`${vendors[x]}CancelAnimationFrame`] ||\n    window[`${vendors[x]}CancelRequestAnimationFrame`];\n  }\n\n  if (window[rAF] && window[cAF]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport default function canUseRAF() {\n  if (!canUseDOM) {\n    return false;\n  }\n\n  return checkRAF(window, 'requestAnimationFrame', 'cancelAnimationFrame');\n}\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/addon/utils/check-scroll-direction.js":"import Ember from 'ember';\n\nconst { assert } = Ember;\nconst { floor } = Math;\n\nexport default function checkScrollDirection(lastPosition = null, newPosition = {}, sensitivity = 1) {\n  if (!lastPosition) {\n    return 'none';\n  }\n\n  assert('sensitivity cannot be 0', sensitivity);\n\n  const { top, left } = newPosition;\n  const { top: lastTop, left: lastLeft } = lastPosition;\n\n  const delta = {\n    top: floor((top  - lastTop)  / sensitivity) * sensitivity,\n    left: floor((left - lastLeft) / sensitivity) * sensitivity\n  };\n\n  if (delta.top > 0) {\n    return 'down';\n  }\n\n  if (delta.top < 0) {\n    return 'up';\n  }\n\n  if (delta.left > 0) {\n    return 'right';\n  }\n\n  if (delta.left < 0) {\n    return 'left';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/addon/utils/is-in-viewport.js":"import Ember from 'ember';\n\nconst assign = Ember.assign || Ember.merge;\n\nconst defaultTolerance = {\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\n\nexport default function isInViewport(boundingClientRect = {}, height = 0, width = 0, tolerance = defaultTolerance) {\n  const { top, left, bottom, right } = boundingClientRect;\n  const tolerances = assign(assign({}, defaultTolerance), tolerance);\n  const {\n    top: topTolerance,\n    left: leftTolerance,\n    bottom: bottomTolerance,\n    right: rightTolerance\n  } = tolerances;\n\n  return (\n    (top + topTolerance)       >= 0 &&\n    (left + leftTolerance)     >= 0 &&\n    (Math.round(bottom) - bottomTolerance) <= Math.round(height) &&\n    (Math.round(right) - rightTolerance)   <= Math.round(width)\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-ember-in-viewport/node_modules/ember-in-viewport/app/initializers/viewport-config.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport canUseDOM from 'ember-in-viewport/utils/can-use-dom';\n\nconst defaultConfig = {\n  viewportEnabled: true,\n  viewportSpy: false,\n  viewportScrollSensitivity: 1,\n  viewportRefreshRate: 100,\n  viewportListeners: [\n    { context: window, event: 'scroll.scrollable' },\n    { context: window, event: 'resize.resizable' }\n  ],\n  viewportTolerance: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  }\n};\n\nif (canUseDOM) {\n  defaultConfig.viewportListeners.push({\n    context: document,\n    event: 'touchmove.scrollable'\n  });\n}\n\nconst assign = Ember.assign || Ember.merge;\n\nexport function initialize() {\n  const application = arguments[1] || arguments[0];\n  const { viewportConfig = {} } = config;\n  const mergedConfig = assign({}, defaultConfig, viewportConfig);\n\n  application.register('config:in-viewport', mergedConfig, { instantiate: false });\n}\n\nexport default {\n  name: 'viewport-config',\n  initialize: initialize\n};\n"}